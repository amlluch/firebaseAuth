AWSTemplateFormatVersion: "2010-09-09"
Description: Firebase proof of concept

Parameters:
  RepoName:
    Type: String
    Description: The name of the GitHub repository

  LambdaCodeVersion:
    Type: String
    Description: Version ID of the Lambda code in the S3 bucket

  LambdaLayerVersion:
    Type: String
    Description: Version ID of the Lambda dependencies in the S3 bucket

  Stage:
    Type: String
    Description: Deployment stage. master->prod, dev->dev, test->test

Resources:
  AuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src.lambda.auth.lambda_handler
      Role: !GetAtt AuthExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-tests
        S3Key: !Sub "${RepoName}/lambda_code.zip"
        S3ObjectVersion: !Ref LambdaCodeVersion
      Runtime: python3.8
      FunctionName: firebase-auth
      Layers:
        - !Ref DependenciesLambdaLayer
      Environment:
        Variables:
          FIREBASE_CREDENTIALS: resolve:secretsmanager:firebase:SecretString


  GetUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src.lambda.get_user.lambda_handler
      Role: !GetAtt GetUserExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-tests
        S3Key: !Sub "${RepoName}/lambda_code.zip"
        S3ObjectVersion: !Ref LambdaCodeVersion
      Runtime: python3.8
      FunctionName: get-user
      Layers:
        - !Ref DependenciesLambdaLayer

  AuthExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
        - PolicyName: SecretsManagerExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:firebase*"

  AuthLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref AuthLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*'
        - ApiId: !Ref ApiGatewayRestApi

  GetUserExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

  GatewayResponseLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: src.lambda.access_denied_response.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: lambda-code-tests
        S3Key: !Sub "${RepoName}/lambda_code.zip"
        S3ObjectVersion: !Ref LambdaCodeVersion
      Runtime: python3.8
      FunctionName: access_denied
      Timeout: 30

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action: apigateway:PUT
                Resource: '*'

  DependenciesLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: lambda-dependencies
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: lambda-dependencies-test
        S3Key: !Sub "${RepoName}/dependencies_layer.zip"
        S3ObjectVersion: !Ref LambdaLayerVersion

  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${RepoName}-API'

  GetUserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt 'ApiGatewayRestApi.RootResourceId'
      PathPart: user

  GetUserMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref GetUserResource
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthLambdaAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt GetUserLambda.Arn

  AuthLambdaAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: 'AuthLambdaAuthorizer'
      RestApiId: !Ref ApiGatewayRestApi
      Type: TOKEN
      IdentitySource: 'method.request.header.Authorization'
      AuthorizerUri: !Sub
        - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
        - LambdaArn: !GetAtt AuthLambda.Arn

  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref GetUserLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*'
        - ApiId: !Ref ApiGatewayRestApi

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: GetUserMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage
      Description: !Sub 'Deployment for ${Stage} stage'

  AccessDeniedGatewayResponse:
    Type: "Custom::ApiGatewayGatewayResponse"
    Properties:
      ServiceToken: !GetAtt GatewayResponseLambdaFunction.Arn
      RestApiId: !Ref 'ApiGatewayRestApi'
      ResponseType: ACCESS_DENIED
      StatusCode: '403'
      ResponseTemplates:
        application/json: >
          {
            "message": "Access Denied!"
          }
